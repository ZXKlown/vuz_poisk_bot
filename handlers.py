import json
from aiogram import Router, Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, InputMediaPhoto
from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import BOT_TOKEN
from cities import letters, cities_by_letter

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
router = Router()

# –ö–ª–∞—Å—Å—ã CallbackData
class CitiesCallbackFactory(CallbackData, prefix="cities"):
    letter_id: int

class CitySelectCallbackFactory(CallbackData, prefix="city"):
    city_name: str

class SpecializationSelectCallbackFactory(CallbackData, prefix="spec"):
    specialization_id: int
    city_name: str

class ConfirmationCallbackFactory(CallbackData, prefix="confirm"):
    city_name: str
    specialization_name: str
    confirmed: bool

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with open("vuz_data_full.json", "r", encoding="utf-8") as file:
    vuz_data = json.load(file)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –±—É–∫–≤–∞–º–∏
builder = InlineKeyboardBuilder()
for letter_id, letter in enumerate(letters):
    builder.add(
        InlineKeyboardButton(
            text=letter,
            callback_data=CitiesCallbackFactory(letter_id=letter_id).pack()
        )
    )
markup = builder.adjust(7).as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞!",
        reply_markup=markup
    )


@router.message(Command("help"))
async def info_command(message: Message):
    text = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—É–∑–∞—Ö –†–æ—Å—Å–∏–∏.\n"
            f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start.")
    await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—É–∫–≤—ã
@router.callback_query(CitiesCallbackFactory.filter())
async def process_letter_selection(callback: CallbackQuery, callback_data: CitiesCallbackFactory):
    letter = letters[callback_data.letter_id]
    city_list = cities_by_letter.get(letter, [])

    builder = InlineKeyboardBuilder()
    for city in city_list:
        builder.add(
            InlineKeyboardButton(
                text=city,
                callback_data=CitySelectCallbackFactory(city_name=city).pack()
            )
        )

    await callback.message.edit_text(
        text=f"–ì–æ—Ä–æ–¥–∞ –Ω–∞ –±—É–∫–≤—É {letter}:",
        reply_markup=builder.adjust(2).as_markup()
    )
    await callback.answer()


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Ö –ø–æ –≥–æ—Ä–æ–¥–∞–º
with open("cities_specializations.json", "r", encoding="utf-8") as file:
    city_specializations = json.load(file)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@router.callback_query(CitySelectCallbackFactory.filter())
async def process_city_selection(callback: CallbackQuery, callback_data: CitySelectCallbackFactory):
    city_name = callback_data.city_name
    specializations = city_specializations.get(city_name, [])

    builder = InlineKeyboardBuilder()
    for idx, (spec_name, spec_count, _) in enumerate(specializations):
        builder.add(
            InlineKeyboardButton(
                text=f"{spec_name} ({spec_count})",
                callback_data=SpecializationSelectCallbackFactory(city_name=city_name, specialization_id=idx).pack()
            )
        )

    await callback.message.edit_text(
        text=f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –≥–æ—Ä–æ–¥–µ {city_name}",
        reply_markup=builder.adjust(1).as_markup()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
@router.callback_query(SpecializationSelectCallbackFactory.filter())
async def process_specialization_selection(callback: CallbackQuery, callback_data: SpecializationSelectCallbackFactory):
    city_name = callback_data.city_name
    specialization_id = callback_data.specialization_id
    specialization = city_specializations[city_name][specialization_id][0]

    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="‚úÖ –î–∞",
            callback_data=ConfirmationCallbackFactory(city_name=city_name, specialization_name=specialization,
                                                      confirmed=True).pack()
        ),
        InlineKeyboardButton(
            text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ",
            callback_data="go_back_to_start"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        )
    )

    await callback.message.edit_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n–ì–æ—Ä–æ–¥: {city_name}\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {specialization}\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=builder.adjust(2).as_markup()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"
@router.callback_query(lambda c: c.data == "go_back_to_start")
async def go_back_to_start(callback: CallbackQuery):
    await process_start_command(callback.message)
    await callback.answer()


@router.callback_query(ConfirmationCallbackFactory.filter())
async def process_confirmation(callback: CallbackQuery, callback_data: ConfirmationCallbackFactory):
    city_name = callback_data.city_name
    specialization_name = callback_data.specialization_name

    universities = vuz_data.get(city_name, {}).get(specialization_name, [])

    if not universities:
        await callback.message.edit_text("‚ùå –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.")
        await callback.answer()
        return

    user_data[callback.from_user.id] = {"city": city_name, "spec": specialization_name, "index": 0}
    await send_university_info(callback, callback.from_user.id)
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ
async def send_university_info(callback: CallbackQuery, user_id: int):
    data = user_data.get(user_id, {})
    city_name = data.get("city")
    specialization_name = data.get("spec")
    index = data.get("index", 0)

    universities = vuz_data.get(city_name, {}).get(specialization_name, [])

    if not universities or index >= len(universities):
        await callback.message.edit_text("‚ùå –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    university = universities[index]

    text = (
        f"üè´ <b><a href='{university['vuz_link']}'>{university['title']}</a></b>\n"
        f"üìö {university['description']}\n\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: {' '.join(university['cost'].split()[1:4])}\n"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—é–¥–∂–µ—Ç–∞
    if "–Ω–µ—Ç" not in university["budget"].lower():
        budget_parts = university["budget"].split()
        text += f"üéì <b>–ë—é–¥–∂–µ—Ç</b>: {budget_parts[2]}, {budget_parts[-2]} –º–µ—Å—Ç\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    if "–Ω–µ—Ç" not in university["paid"].lower():
        paid_parts = university["paid"].split()
        text += f"üìñ <b>–ü–ª–∞—Ç–Ω–æ–µ</b>: {paid_parts[2]}, {paid_parts[-2]} –º–µ—Å—Ç\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ—Ä–∞—á–∏–≤–∞—é—â—É—é—Å—è —Ü–∏—Ç–∞—Ç—É
    text += (
        f"\nüìù <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</b>: <blockquote>\n"
        f"–û–±—â–µ–∂–∏—Ç–∏–µ: {university['options_check']['–û–±—â–µ–∂–∏—Ç–∏–µ']}\n"
        f"–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π: {university['options_check']['–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π']}\n"
        f"–í–æ–µ–Ω. —É—á. —Ü–µ–Ω—Ç—Ä: {university['options_check']['–í–æ–µ–Ω. —É—á. —Ü–µ–Ω—Ç—Ä']}\n"
        f"–ë—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞: {university['options_check']['–ë—é–¥–∂–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞']}\n"
        f"–õ–∏—Ü–µ–Ω–∑–∏—è/–∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è: {university['options_check']['–õ–∏—Ü–µ–Ω–∑–∏—è/–∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è']}\n"
        f"</blockquote>"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_url = university.get("image_url", "https://example.com/default.jpg")

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder = InlineKeyboardBuilder()
    if index > 0:
        builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data="previous"))
    if index < len(universities) - 1:
        builder.add(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="next"))

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    media = InputMediaPhoto(media=image_url, caption=text, parse_mode=ParseMode.HTML)
    await callback.message.edit_media(media, reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ "–ø—Ä–µ–¥—ã–¥—É—â–∏–π" –∏ "—Å–ª–µ–¥—É—é—â–∏–π"
@router.callback_query(lambda c: c.data in ["previous", "next"])
async def navigate_universities(callback: CallbackQuery):
    user_id = callback.from_user.id
    data = user_data.get(user_id, {})

    if not data:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞—á–∞–ª–∞.", show_alert=True)
        return

    city_name = data.get("city")
    specialization_name = data.get("spec")
    universities = vuz_data.get(city_name, {}).get(specialization_name, [])

    if not universities:
        await callback.answer("–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    if callback.data == "previous" and data["index"] > 0:
        user_data[user_id]["index"] -= 1
    elif callback.data == "next" and data["index"] < len(universities) - 1:
        user_data[user_id]["index"] += 1

    await send_university_info(callback, user_id)
    await callback.answer()